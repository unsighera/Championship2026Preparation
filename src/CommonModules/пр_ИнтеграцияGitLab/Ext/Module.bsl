
Процедура УстановитьТокен(Проект, Токен) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Проект, Токен, "Токен");
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры

Процедура СоединитьСПроектом(Проект) Экспорт
	
	ПутьШаблон = "api/v4/projects/%1"; 
	Путь = СтрШаблон(ПутьШаблон, Формат(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "пр_ИдентификаторПроекта"), "ЧГ=0"));
	
	HTTPСоединение = Новый HTTPСоединение("192.168.1.42");
	
	Токен = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Проект, "Токен");
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("PRIVATE-TOKEN", Токен);
	Заголовки.Вставить("Content-Type", "application/json");
	
	Запрос = Новый HTTPЗапрос(Путь, Заголовки);
	
	Попытка
		
		Ответ = HTTPСоединение.Получить(Запрос);
		Если Ответ.КодСостояния >= 200 И Ответ.КодСостояния <= 299 Тогда
			ОбщегоНазначения.СообщитьПользователю(Ответ.ПолучитьТелоКакСтроку());
		Иначе
			ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("Ошибка записи задания в GitLab",
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.ОбщиеМодули.пр_ИнтеграцияGitLab,
			Ответ.КодСостояния,
			Ответ.ПолучитьТелоКакСтроку());
		КонецЕсли;
		
	Исключение
		
		Сообщить("Ошибка соединения с сервером");
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьЗаданияКОбновлению() Экспорт
	
	Узел = ПланыОбмена.пр_СинхронизацияGitLab.НайтиПоКоду("gitlab");
	СписокУзлов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Узел); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаданиеНаРаботу.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаданиеНаРаботу КАК ЗаданиеНаРаботу
		|ГДЕ
		|	НЕ ЗаданиеНаРаботу.пр_ЗаданиеЗакрыто
		|	И ЗаданиеНаРаботу.пр_ИдентификаторЗадания > 0";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ПланыОбмена.ЗарегистрироватьИзменения(СписокУзлов, РезультатЗапроса.ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура СоздатьЗадания() Экспорт
	
	Узел = ПланыОбмена.пр_СинхронизацияGitLab.НайтиПоКоду("gitlab");
	СписокУзлов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Узел); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаданиеНаРаботуИзменения.Ссылка КАК Ссылка,
	|	ЗаданиеНаРаботуИзменения.Ссылка.Представление КАК title,
	|	ЗаписиКалендаряСотрудника.КолонкаКалендаря.пр_МеткаКолонки КАК labels,
	|	ЗаданиеНаРаботуРаботы.Комментарий КАК description,
	|	ЗаданиеНаРаботуИзменения.Ссылка.пр_Проект КАК Проект,
	|	ЗаданиеНаРаботуИзменения.Ссылка.пр_Проект.пр_ИдентификаторПроекта КАК ИдентификаторПроекта
	|ИЗ
	|	Документ.ЗаданиеНаРаботу.Изменения КАК ЗаданиеНаРаботуИзменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаРаботу.Работы КАК ЗаданиеНаРаботуРаботы
	|		ПО ЗаданиеНаРаботуИзменения.Ссылка = ЗаданиеНаРаботуРаботы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
	|		ПО (ЗаданиеНаРаботуИзменения.Ссылка = ЗаписиКалендаряСотрудника.Источник
	|				И ЗаписиКалендаряСотрудника.КолонкаКалендаря.пр_МеткаКолонки = ""Анализ"")
	|ГДЕ
	|	ЗаданиеНаРаботуИзменения.Узел = &Узел
	|	И ЗаданиеНаРаботуИзменения.Ссылка.пр_ИдентификаторЗадания = 0
	|	И НЕ ЗаданиеНаРаботуИзменения.Ссылка.пр_ЗаданиеЗакрыто";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ПутьШаблон = "api/v4/projects/%1/issues"; 
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ИдентификаторПроекта) Тогда
			Путь = СтрШаблон(ПутьШаблон, Формат(Выборка.ИдентификаторПроекта, "ЧГ=0"));
			СтруктураОтправки = Новый Структура("labels, title, description");
			ЗаполнитьЗначенияСвойств(СтруктураОтправки, Выборка);
			Результат = ОтправитьJSON(Путь, Выборка.Проект, СтруктураОтправки);
			Если Результат <> Неопределено Тогда
				Задание = Выборка.Ссылка.ПолучитьОбъект();
				Задание.пр_ИдентификаторЗадания = Результат["iid"];
				Задание.Записать();
				ПланыОбмена.УдалитьРегистрациюИзменений(СписокУзлов, Задание.Ссылка);
			Иначе
				ОбщегоНазначения.СообщитьПользователю("Не удалось создать задание на сервере(");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры   

Процедура ПрочитатьЗадания() Экспорт
	
	Узел = ПланыОбмена.пр_СинхронизацияGitLab.НайтиПоКоду("gitlab");
	СписокУзлов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Узел); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаданиеНаРаботуИзменения.Ссылка КАК Ссылка,
	|	ЗаданиеНаРаботуИзменения.Ссылка.пр_Проект КАК Проект,
	|	ЗаданиеНаРаботуИзменения.Ссылка.пр_Проект.пр_ИдентификаторПроекта КАК ИдентификаторПроекта,
	|	ЗаданиеНаРаботуИзменения.Ссылка.пр_ИдентификаторЗадания КАК ИдентификаторЗадания,
	|	ЗаписиКалендаряСотрудника.Календарь КАК Календарь,
	|	ЗаписиКалендаряСотрудника.Ссылка КАК ЗаписьКалендаряСотрудника
	|ИЗ
	|	Документ.ЗаданиеНаРаботу.Изменения КАК ЗаданиеНаРаботуИзменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
	|		ПО ЗаданиеНаРаботуИзменения.Ссылка = ЗаписиКалендаряСотрудника.Источник
	|ГДЕ
	|	ЗаданиеНаРаботуИзменения.Узел = &Узел
	|	И ЗаданиеНаРаботуИзменения.Ссылка.пр_ИдентификаторЗадания > 0
	|	И НЕ ЗаданиеНаРаботуИзменения.Ссылка.пр_ЗаданиеЗакрыто";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ИдентификаторыПроектов = ОбщегоНазначения.ВыгрузитьКолонку(РезультатЗапроса, "ИдентификаторПроекта", Истина);
	
	Для каждого ПроектИД Из ИдентификаторыПроектов Цикл
		
		СписокЗаданийПроекта = РезультатЗапроса.НайтиСтроки(Новый Структура("ИдентификаторПроекта", ПроектИД));
		Путь = ПутьДляЗапроса(СписокЗаданийПроекта, ПроектИД);
		СписокЗаданийGitLab = ПолучитьJSON(Путь, СписокЗаданийПроекта[0].Проект);
		КолонкиПроекта = Справочники.КолонкиКалендарейСотрудников.пр_КолонкиКалендаряВладельца(СписокЗаданийПроекта[0].Календарь); 
		ОбновитьЗадания(СписокЗаданийGitLab, СписокЗаданийПроекта, КолонкиПроекта, СписокУзлов);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЗадания(СписокЗаданийGitLab, СписокЗаданийПроекта, КолонкиПроекта, СписокУзлов)
	
	Для каждого ЗаданиеGitLab Из СписокЗаданийGitLab Цикл
		
		Для каждого Задание Из СписокЗаданийПроекта Цикл
			
			Если Задание.ИдентификаторЗадания = ЗаданиеGitLab["iid"] Тогда
				
				ОбновитьЗадание(ЗаданиеGitLab, Задание, КолонкиПроекта, СписокУзлов);		
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;		
	
КонецПроцедуры

Процедура ОбновитьЗадание(ЗаданиеGitLab, Задание, КолонкиПроекта, СписокУзлов)
	
	ЗаданиеОбъект = Задание.Ссылка.ПолучитьОбъект();
	
	Попытка
		ЗаданиеОбъект.Заблокировать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось заблокировать объект");
		ВызватьИсключение;
	КонецПопытки;
	
	ЗаданиеОбъект.пр_ФактGitLab = ЗаданиеGitLab["time_stats"]["total_time_spent"] / 3600;
	ЗаданиеОбъект.пр_ПланGitLab = ЗаданиеGitLab["time_stats"]["time_estimate"] / 3600;
	
	МеткиGitLab = ЗаданиеGitLab["labels"];
	
	Если МеткиGitLab.Количество() Тогда
		НайденнаяКолонка = КолонкиПроекта.НайтиСтроки(Новый Структура("МеткаКолонки", МеткиGitLab[0]));
		Если НайденнаяКолонка.Количество() Тогда
			ЗаписьКалендаря = Задание.ЗаписьКалендаряСотрудника.ПолучитьОбъект();
			ЗаписьКалендаря.КолонкаКалендаря = НайденнаяКолонка[0].Ссылка;
			ЗаписьКалендаря.Записать();
		КонецЕсли;
	ИначеЕсли ЗаданиеGitLab["state"] = "closed" И МеткиGitLab.Количество() = 0 Тогда 
		ЗаданиеОбъект.пр_ЗаданиеЗакрыто = Истина;
		ЗаписьКалендаря = Задание.ЗаписьКалендаряСотрудника.ПолучитьОбъект();
		ЗаписьКалендаря.КолонкаКалендаря = КолонкаГотово(КолонкиПроекта);
		ЗаписьКалендаря.Записать();
	ИначеЕсли ЗаданиеGitLab["state"] = "opened" И МеткиGitLab.Количество() = 0 Тогда
		ЗаписьКалендаря = Задание.ЗаписьКалендаряСотрудника.ПолучитьОбъект();
		ЗаписьКалендаря.КолонкаКалендаря = Справочники.КолонкиКалендарейСотрудников.КолонкаНеобработанное(Задание.Календарь);
		ЗаписьКалендаря.Записать();
	Иначе
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
		"Ошибка",
		УровеньЖурналаРегистрации.Предупреждение,
		Метаданные.Документы.ЗаданиеНаРаботу,
		ЗаданиеОбъект.Ссылка,
		"Неизвестное условие метки");
	КонецЕсли;
	
	СотрудникиGitLab = ЗаданиеGitLab["assignees"];
	Если СотрудникиGitLab.Количество() Тогда
		СотрудникСсылка = Справочники.Сотрудники.НайтиПоРеквизиту("пр_ИдентификаторСотрудника", СотрудникиGitLab[0]["id"]);
		Если НЕ СотрудникСсылка.Пустая() Тогда
			ЗаданиеОбъект.Сотрудник = СотрудникСсылка;
		КонецЕсли;
	КонецЕсли;
	
	ЗаданиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	ЗаданиеОбъект.Разблокировать();
	
КонецПроцедуры

Функция КолонкаГотово(СписокКолонок)
	
	Для каждого Колонка Из СписокКолонок Цикл
		
		Если Колонка.МеткаКолонки = "Готово" Тогда
			
			Возврат Колонка.Ссылка;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ПутьДляЗапроса(СписокЗаданийПроекта, ИдентификаторПроекта)
	
	МассивПутейЗаданий = Новый Массив;
	
	ПолныйПуть = "api/v4/projects/%1/issues?%2";
	ЗаданиеШаблон = "iids[]=%1";
	
	Для каждого Задание Из СписокЗаданийПроекта Цикл
		МассивПутейЗаданий.Добавить(СтрШаблон(ЗаданиеШаблон, Задание.ИдентификаторЗадания));
	КонецЦикла; 
	
	Возврат СтрШаблон(ПолныйПуть, ИдентификаторПроекта, СтрСоединить(МассивПутейЗаданий, "&"));
	
КонецФункции

Функция ОтправитьJSON(Путь, Проект, СтруктураОтправки)
	
	ДанныеОтправки = Неопределено;
	
	HTTPСоединение = Новый HTTPСоединение("192.168.1.42");
	
	Токен = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Проект, "Токен");
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("PRIVATE-TOKEN", Токен);
	Заголовки.Вставить("Content-Type", "application/json");
	
	Запрос = Новый HTTPЗапрос(Путь, Заголовки);
	Запрос.УстановитьТелоИзСтроки(ЗаписатьЗначениеJSON(СтруктураОтправки));
	
	Попытка
		
		Ответ = HTTPСоединение.ОтправитьДляОбработки(Запрос);
		Если Ответ.КодСостояния >= 200 И Ответ.КодСостояния <= 299 Тогда
			ДанныеОтправки = ПрочитатьЗначениеJSON(Ответ.ПолучитьТелоКакСтроку());
		Иначе
			ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("Ошибка записи задания в GitLab",
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.ОбщиеМодули.пр_ИнтеграцияGitLab,
			СтруктураОтправки,
			Ответ.ПолучитьТелоКакСтроку());
		КонецЕсли;
		
	Исключение
		
		Сообщить("Ошибка соединения с сервером");
		
	КонецПопытки;
	
	Возврат ДанныеОтправки;
	
КонецФункции 

Функция ПолучитьJSON(Путь, Проект)
	
	ДанныеОтправки = Неопределено;
	
	HTTPСоединение = Новый HTTPСоединение("192.168.1.42");
	
	Токен = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Проект, "Токен");
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("PRIVATE-TOKEN", Токен);
	Заголовки.Вставить("Content-Type", "application/json");
	
	Запрос = Новый HTTPЗапрос(Путь, Заголовки);
	
	Попытка
		
		Ответ = HTTPСоединение.Получить(Запрос);
		Если Ответ.КодСостояния >= 200 И Ответ.КодСостояния <= 299 Тогда
			ДанныеОтправки = ПрочитатьЗначениеJSON(Ответ.ПолучитьТелоКакСтроку());
		Иначе
			ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("Ошибка записи задания в GitLab",
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.ОбщиеМодули.пр_ИнтеграцияGitLab,
			Ответ.КодСостояния,
			Ответ.ПолучитьТелоКакСтроку());
		КонецЕсли;
		
	Исключение
		
		Сообщить("Ошибка соединения с сервером");
		
	КонецПопытки;
	
	Возврат ДанныеОтправки;
	
КонецФункции


